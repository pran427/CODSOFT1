import tkinter as tk
from tkinter import simpledialog, messagebox
from datetime import datetime
import uuid

class TodoApp:
    def __init__(self, root):  # <-- FIXED HERE
        self.root = root
        self.root.title("🌟 Manaswitha's Vibrant Todo Tracker")
        self.root.geometry("500x670")
        self.root.configure(bg="#fdf6e3")

        self.tasks = []

        # Title Label
        tk.Label(root, text="✨ Your Daily Goals ✨", font=("Helvetica", 18, "bold"),
                 bg="#fdf6e3", fg="#2c3e50", pady=12).pack()

        # Task Listbox
        self.task_listbox = tk.Listbox(root, font=("Segoe UI", 11), selectmode=tk.SINGLE,
                                       bg="#ffffff", fg="#2c3e50", selectbackground="#d1f2eb",
                                       height=18, activestyle='none', bd=3, relief=tk.RIDGE,
                                       highlightthickness=1, highlightbackground="#a3c4dc", selectforeground="#000000")
        self.task_listbox.pack(pady=(10, 5), fill=tk.BOTH, expand=True, padx=16)

        # Events
        self.task_listbox.bind("<B1-Motion>", self.drag_task)
        self.task_listbox.bind("<ButtonRelease-1>", self.drop_task)
        self.task_listbox.bind("<Double-Button-1>", self.show_task_info)

        # Buttons Frame
        btn_frame = tk.Frame(root, bg="#fdf6e3")
        btn_frame.pack(pady=12)

        self.make_button(btn_frame, "➕ Add Task", self.add_task, 0, "#3498db")
        self.make_button(btn_frame, "✏ Update", self.update_task, 1, "#f39c12")
        self.make_button(btn_frame, "🗑 Delete", self.delete_task, 2, "#e74c3c")

        # Mark as Done Button
        tk.Button(root, text="✅ Mark as Done", font=("Arial", 11, "bold"), width=22,
                  command=self.mark_done, bg="#27ae60", fg="white", relief=tk.RAISED,
                  activebackground="#2ecc71").pack(pady=6)

        # Status Label
        self.status_label = tk.Label(root, text="", font=("Arial", 11, "bold"),
                                     bg="#e8f8f5", fg="#2c3e50", relief=tk.SUNKEN, bd=2)
        self.status_label.pack(pady=(10, 5), fill=tk.X, padx=14)

        self.dragging_index = None
        self.refresh_tasks()

    def make_button(self, frame, text, cmd, col, color):
        btn = tk.Button(frame, text=text, width=12, command=cmd,
                        font=("Arial", 10, "bold"), bg=color, fg="white",
                        activebackground=color, relief=tk.RAISED, bd=3)
        btn.grid(row=0, column=col, padx=6)

    def add_task(self):
        task_text = simpledialog.askstring("Add Task", "Enter your task:")
        if task_text:
            new_task = {
                "id": str(uuid.uuid4()),
                "text": task_text,
                "done": False,
                "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            self.tasks.append(new_task)
            self.refresh_tasks()

    def update_task(self):
        selected = self.task_listbox.curselection()
        if selected:
            index = selected[0] // 2
            current_task = self.tasks[index]["text"]
            new_task = simpledialog.askstring("Update Task", "Edit your task:", initialvalue=current_task)
            if new_task:
                self.tasks[index]["text"] = new_task
                self.refresh_tasks()
        else:
            messagebox.showwarning("⚠ No selection", "Please select a task to update.")

    def delete_task(self):
        selected = self.task_listbox.curselection()
        if selected:
            index = selected[0] // 2
            del self.tasks[index]
            self.refresh_tasks()
        else:
            messagebox.showwarning("⚠ No selection", "Please select a task to delete.")

    def mark_done(self):
        selected = self.task_listbox.curselection()
        if selected:
            index = selected[0] // 2
            self.tasks[index]["done"] = True
            self.refresh_tasks()
        else:
            messagebox.showwarning("⚠ No selection", "Please select a task to mark as done.")

    def refresh_tasks(self):
        self.task_listbox.delete(0, tk.END)
        for task in self.tasks:
            status = "✅ Done" if task["done"] else "🔴 Pending"
            icon = "✔" if task["done"] else "📝"
            task_text = f"{icon} {task['text']}"
            time_info = f"   [{status}] • 🕒 {task['created']}"
            if task["done"]:
                task_text = f"✔ {task['text']}"
                time_info = f"   ✅ Done on {task['created']}"
            self.task_listbox.insert(tk.END, task_text)
            self.task_listbox.insert(tk.END, time_info)
        self.update_status()

    def update_status(self):
        total = len(self.tasks)
        completed = sum(1 for task in self.tasks if task["done"])
        pending = total - completed
        self.status_label.config(
            text=f"📋 Total: {total}    ✅ Done: {completed}    ⏳ Pending: {pending}"
        )

    def drag_task(self, event):
        widget = event.widget
        self.dragging_index = widget.nearest(event.y) // 2

    def drop_task(self, event):
        if self.dragging_index is not None:
            widget = event.widget
            drop_index = widget.nearest(event.y) // 2
            if drop_index != self.dragging_index:
                self.tasks.insert(drop_index, self.tasks.pop(self.dragging_index))
                self.refresh_tasks()
            self.dragging_index = None

    def show_task_info(self, event):
        selected = self.task_listbox.curselection()
        if selected:
            index = selected[0] // 2
            task = self.tasks[index]
            info = (
                f"🆔 Task ID: {task['id']}\n"
                f"📝 Task: {task['text']}\n"
                f"📌 Status: {'✅ Done' if task['done'] else '🔴 Pending'}\n"
                f"📅 Created: {task['created']}"
            )
            messagebox.showinfo("📘 Task Details", info)

# Entry point
if __name__ == "__main__":
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()
